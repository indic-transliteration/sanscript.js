/* globals QUnit, Sanscript */

if (typeof QUnit == "undefined") {
    QUnit = require("qunit"); // eslint-disable-line no-global-assign
}

if (typeof Sanscript == "undefined") {
    Sanscript = require("../sanscript"); // eslint-disable-line no-global-assign
}

const names = {
    bengali          : "Bengali",
    devanagari       : "Devanagari",
    grantha          : "Grantha",
    gujarati         : "Gujarati",
    gurmukhi         : "Gurmukhi",
    hk               : "Harvard-Kyoto",
    iast             : "IAST",
    itrans           : "ITRANS",
    itrans_dravidian : "ITRANS",
    kannada          : "Kannada",
    kolkata          : "Kolkata",
    malayalam        : "Malayalam",
    oriya            : "Oriya",
    tamil            : "Tamil",
    telugu           : "Telugu",
};

const data = {
    bengali : {
        vowels     : "ржЕ ржЖ ржЗ ржИ ржЙ ржК ржЛ рза ржМ рзб ржП ржР ржУ ржФ",
        marks      : "ржХ ржЦрж╛ ржЧрж┐ ржШрзА ржЩрзБ ржЪрзВ ржЫрзГ ржЬрзД ржЭрзв ржЮрзг ржЯрзЗ ржарзИ ржбрзЛ ржврзМ ржгржВ рждржГ ржерзН",
        consonants : "ржХ ржЦ ржЧ ржШ ржЩ ржЪ ржЫ ржЬ ржЭ ржЮ ржЯ ржа ржб ржв ржг ржд рже ржж ржз ржи ржк ржл ржм ржн ржо",
        other      : "ржп рж░ рж▓ ржм рж╢ рж╖ рж╕ рж╣ рд│",
        symbols    : "реР ред рее рзж рзз рзи рзй рзк рзл рзм рзн рзо рзп",
        putra      : "ржкрзБрждрзНрж░",
        naraIti    : "ржирж░ ржЗрждрж┐",
        sentence   : "ржзрж░рзНржоржХрзНрж╖рзЗрждрзНрж░рзЗ ржХрзБрж░рзБржХрзНрж╖рзЗрждрзНрж░рзЗ рж╕ржоржмрзЗрждрж╛ ржпрзБржпрзБрждрзНрж╕ржмржГ ред",
    },
    devanagari : {
        vowels       : "рдЕ рдЖ рдЗ рдИ рдЙ рдК рдЛ реа рдМ реб рдП рдР рдУ рдФ",
        short_vowels : "рдО рдП рдТ рдУ",
        marks        : "рдХ рдЦрд╛ рдЧрд┐ рдШреА рдЩреБ рдЪреВ рдЫреГ рдЬреД рдЭрев рдЮрег рдЯреЗ рдареИ рдбреЛ рдвреМ рдгрдВ рддрдГ рдереН",
        short_marks  : "рдХреЖ рдХреЗ рдХреК рдХреЛ",
        consonants   : "рдХ рдЦ рдЧ рдШ рдЩ рдЪ рдЫ рдЬ рдЭ рдЮ рдЯ рда рдб рдв рдг рдд рде рдж рдз рди рдк рдл рдм рдн рдо",
        other        : "рдп рд░ рд▓ рд╡ рд╢ рд╖ рд╕ рд╣ рд│",
        symbols      : "реР ред рее реж рез реи рей рек рел рем рен рео реп",
        putra        : "рдкреБрддреНрд░",
        naraIti      : "рдирд░ рдЗрддрд┐",
        sentence     : "рдзрд░реНрдордХреНрд╖реЗрддреНрд░реЗ рдХреБрд░реБрдХреНрд╖реЗрддреНрд░реЗ рд╕рдорд╡реЗрддрд╛ рдпреБрдпреБрддреНрд╕рд╡рдГ ред",
    },
    grantha : {
        vowels       : "ЁСМЕ ЁСМЖ ЁСМЗ ЁСМИ ЁСМЙ ЁСМК ЁСМЛ ЁСНа ЁСММ ЁСНб ЁСМП ЁСМР ЁСМУ ЁСМФ",
        short_vowels : "ЁСМПЁСМА ЁСМП ЁСМУЁСМА ЁСМУ",
        marks        : "ЁСМХ ЁСМЦЁСМ╛ ЁСМЧЁСМ┐ ЁСМШЁСНА ЁСМЩЁСНБ ЁСМЪЁСНВ ЁСМЫЁСНГ ЁСМЬЁСНД ЁСМЭЁСНв ЁСМЮЁСНг ЁСМЯЁСНЗ ЁСМаЁСНИ ЁСМбЁСНЛ ЁСМвЁСНЧ ЁСМгЁСМВ ЁСМдЁСМГ ЁСМеЁСНН",
        short_marks  : "ЁСМХЁСНЗЁСМА ЁСМХЁСНЗ ЁСМХЁСНЛЁСМА ЁСМХЁСНЛ",
        consonants   : "ЁСМХ ЁСМЦ ЁСМЧ ЁСМШ ЁСМЩ ЁСМЪ ЁСМЫ ЁСМЬ ЁСМЭ ЁСМЮ ЁСМЯ ЁСМа ЁСМб ЁСМв ЁСМг ЁСМд ЁСМе ЁСМж ЁСМз ЁСМи ЁСМк ЁСМл ЁСМм ЁСМн ЁСМо",
        other        : "ЁСМп ЁСМ░ ЁСМ▓ ЁСМ╡ ЁСМ╢ ЁСМ╖ ЁСМ╕ ЁСМ╣ ЁСМ│",
        symbols      : "ЁСНР ред рее рпж рпз рпи рпй рпк рпл рпм рпн рпо рпп",
        putra        : "ЁСМкЁСНБЁСМдЁСННЁСМ░",
        naraIti      : "ЁСМиЁСМ░ ЁСМЗЁСМдЁСМ┐",
        sentence     : "ЁСМзЁСМ░ЁСННЁСМоЁСМХЁСННЁСМ╖ЁСНЗЁСМдЁСННЁСМ░ЁСНЗ ЁСМХЁСНБЁСМ░ЁСНБЁСМХЁСННЁСМ╖ЁСНЗЁСМдЁСННЁСМ░ЁСНЗ ЁСМ╕ЁСМоЁСМ╡ЁСНЗЁСМдЁСМ╛ ЁСМпЁСНБЁСМпЁСНБЁСМдЁСННЁСМ╕ЁСМ╡ЁСМГ ред",
    },
    gujarati : {
        vowels     : "ркЕ ркЖ ркЗ ркИ ркЙ ркК ркЛ рла ркМ рлб ркП ркР ркУ ркФ",
        marks      : "ркХ ркЦрк╛ ркЧрк┐ ркШрлА ркЩрлБ ркЪрлВ ркЫрлГ ркЬрлД ркЭрлв ркЮрлг ркЯрлЗ ркарлИ ркбрлЛ ркврлМ ркгркВ ркдркГ ркерлН",
        consonants : "ркХ ркЦ ркЧ ркШ ркЩ ркЪ ркЫ ркЬ ркЭ ркЮ ркЯ рка ркб ркв ркг ркд рке ркж ркз рки ркк ркл ркм ркн рко",
        other      : "ркп рк░ рк▓ рк╡ рк╢ рк╖ рк╕ рк╣ рк│",
        symbols    : "рлР ред рее рлж рлз рли рлй рлк рлл рлм рлн рло рлп",
        putra      : "рккрлБркдрлНрк░",
        naraIti    : "ркирк░ ркЗркдрк┐",
        sentence   : "ркзрк░рлНркоркХрлНрк╖рлЗркдрлНрк░рлЗ ркХрлБрк░рлБркХрлНрк╖рлЗркдрлНрк░рлЗ рк╕ркорк╡рлЗркдрк╛ ркпрлБркпрлБркдрлНрк╕рк╡ркГ ред",
    },
    gurmukhi : {
        vowels     : "риЕ риЖ риЗ риИ риЙ риК риП риР риУ риФ",
        marks      : "риХ риЦри╛ риЧри┐ риШрйА риЩрйБ риЪрйВ риЯрйЗ риарйИ рибрйЛ риврйМ ригриВ ридриГ риерйН",
        consonants : "риХ риЦ риЧ риШ риЩ риЪ риЫ риЬ риЭ риЮ риЯ риа риб рив риг рид рие риж риз рии рик рил рим рин рио",
        other      : "рип ри░ ри▓ ри╡ ри╢ ри╢ ри╕ ри╣ ри│",
        symbols    : "реР ред рее рйж рйз рйи рйй рйк рйл рйм рйн рйо рйп",
        putra      : "рикрйБридрйНри░",
        naraIti    : "риири░ риЗридри┐",
        sentence   : "ризри░рйНриориХрйНри╢рйЗридрйНри░рйЗ риХрйБри░рйБриХрйНри╢рйЗридрйНри░рйЗ ри╕риори╡рйЗридри╛ рипрйБрипрйБридрйНри╕ри╡риГ ред",
    },
    hk : {
        vowels     : "a A i I u U R RR lR lRR e ai o au",
        marks      : "ka khA gi ghI Gu cU chR jRR jhlR JlRR Te Thai Do Dhau NaM taH th",
        consonants : "ka kha ga gha Ga ca cha ja jha Ja Ta Tha Da Dha Na ta tha da dha na pa pha ba bha ma",
        other      : "ya ra la va za Sa sa ha La",
        symbols    : "OM | || 0 1 2 3 4 5 6 7 8 9",
        putra      : "putra",
        naraIti    : "nara iti",
        sentence   : "dharmakSetre kurukSetre samavetA yuyutsavaH |",
    },
    iast : {
        vowels     : "a ─Б i ─л u ┼л с╣Ы с╣Э с╕╖ с╕╣ e ai o au",
        marks      : "ka kh─Б gi gh─л с╣Еu c┼л chс╣Ы jс╣Э jhс╕╖ ├▒с╕╣ с╣нe с╣нhai с╕Нo с╕Нhau с╣Зaс╣Г taс╕е th",
        consonants : "ka kha ga gha с╣Еa ca cha ja jha ├▒a с╣нa с╣нha с╕Нa с╕Нha с╣Зa ta tha da dha na pa pha ba bha ma",
        other      : "ya ra la va ┼Ыa с╣гa sa ha с╕╗a",
        symbols    : "oс╣Г ред рее 0 1 2 3 4 5 6 7 8 9",
        putra      : "putra",
        naraIti    : "nara iti",
        sentence   : "dharmakс╣гetre kurukс╣гetre samavet─Б yuyutsavaс╕е ред",
    },
    cyrillic : {
        vowels     : "╨░ ╨░╠Д ╨╕ ╙г ╤Г ╙п ╤А╠г ╤А╠г╠Д ╨╗╠г ╨╗╠г╠Д ╤Н ╨░╨╕ ╨╛ ╨░╤Г",
        marks      : "╨║╨░ ╨║╤Е╨░╠Д ╨│╨╕ ╨│╤Е╙г ╨╜╠З╤Г ╤З╙п ╤З╤Е╤А╠г ╨┤╨╢╤А╠г╠Д ╨┤╨╢╤Е╨╗╠г ╨╜╠Г╨╗╠г╠Д ╤В╠г╤Н ╤В╠г╤Е╨░╨╕ ╨┤╠г╨╛ ╨┤╠г╤Е╨░╤Г ╨╜╠г╨░╨╝╠г ╤В╨░╤Е╠г ╤В╤Е",
        consonants : "╨║╨░ ╨║╤Е╨░ ╨│╨░ ╨│╤Е╨░ ╨╜╠З╨░ ╤З╨░ ╤З╤Е╨░ ╨┤╨╢╨░ ╨┤╨╢╤Е╨░ ╨╜╠Г╨░ ╤В╠г╨░ ╤В╠г╤Е╨░ ╨┤╠г╨░ ╨┤╠г╤Е╨░ ╨╜╠г╨░ ╤В╨░ ╤В╤Е╨░ ╨┤╨░ ╨┤╤Е╨░ ╨╜╨░ ╨┐╨░ ╨┐╤Е╨░ ╨▒╨░ ╨▒╤Е╨░ ╨╝╨░",
        other      : "╨╣╨░ ╤А╨░ ╨╗╨░ ╨▓╨░ ╤И╠Б╨░ ╤И╨░ ╤Б╨░ ╤Е╨░ ╨╗╠д╨░",
        symbols    : "╨╛╨╝╠г ред рее 0 1 2 3 4 5 6 7 8 9",
        putra      : "╨┐╤Г╤В╤А╨░",
        naraIti    : "╨╜╨░╤А╨░ ╨╕╤В╨╕",
        sentence   : "╨┤╤Е╨░╤А╨╝╨░╨║╤И╤Н╤В╤А╤Н ╨║╤Г╤А╤Г╨║╤И╤Н╤В╤А╤Н ╤Б╨░╨╝╨░╨▓╤Н╤В╨░╠Д ╨╣╤Г╨╣╤Г╤В╤Б╨░╨▓╨░╤Е╠г ред",
    },
    itrans : {
        vowels     : "a A i I u U RRi RRI LLi LLI e ai o au",
        marks      : "ka khA gi ghI ~Nu chU ChRRi jRRI jhLLi ~nLLI Te Thai Do Dhau NaM taH th",
        consonants : "ka kha ga gha ~Na cha Cha ja jha ~na Ta Tha Da Dha Na ta tha da dha na pa pha ba bha ma",
        other      : "ya ra la va sha Sha sa ha La",
        symbols    : "OM | || 0 1 2 3 4 5 6 7 8 9",
        putra      : "putra",
        naraIti    : "nara iti",
        sentence   : "dharmakShetre kurukShetre samavetA yuyutsavaH |",
    },
    itrans_dravidian : {
        short_vowels : "e E o O",
        short_marks  : "ke kE ko kO",
    },
    kolkata : {
        short_vowels : "e ─У o ┼Н",
        short_marks  : "ke k─У ko k┼Н",
    },
    kannada : {
        vowels       : "р▓Е р▓Ж р▓З р▓И р▓Й р▓К р▓Л р│а р▓М р│б р▓П р▓Р р▓У р▓Ф",
        short_vowels : "р▓О р▓П р▓Т р▓У",
        marks        : "р▓Х р▓Цр▓╛ р▓Чр▓┐ р▓Шр│А р▓Щр│Б р▓Ър│В р▓Ыр│Г р▓Ьр│Д р▓Эр│в р▓Юр│г р▓Яр│З р▓ар│И р▓бр│Л р▓вр│М р▓гр▓В р▓др▓Г р▓ер│Н",
        short_marks  : "р▓Хр│Ж р▓Хр│З р▓Хр│К р▓Хр│Л",
        consonants   : "р▓Х р▓Ц р▓Ч р▓Ш р▓Щ р▓Ъ р▓Ы р▓Ь р▓Э р▓Ю р▓Я р▓а р▓б р▓в р▓г р▓д р▓е р▓ж р▓з р▓и р▓к р▓л р▓м р▓н р▓о",
        other        : "р▓п р▓░ р▓▓ р▓╡ р▓╢ р▓╖ р▓╕ р▓╣ р▓│",
        symbols      : "р▓Ур▓В ред рее р│ж р│з р│и р│й р│к р│л р│м р│н р│о р│п",
        putra        : "р▓кр│Бр▓др│Нр▓░",
        naraIti      : "р▓ир▓░ р▓Зр▓др▓┐",
        sentence     : "р▓зр▓░р│Нр▓ор▓Хр│Нр▓╖р│Зр▓др│Нр▓░р│З р▓Хр│Бр▓░р│Бр▓Хр│Нр▓╖р│Зр▓др│Нр▓░р│З р▓╕р▓ор▓╡р│Зр▓др▓╛ р▓пр│Бр▓пр│Бр▓др│Нр▓╕р▓╡р▓Г ред",
    },
    malayalam : {
        vowels       : "р┤Е р┤Ж р┤З р┤И р┤Й р┤К р┤Л р╡а р┤М р╡б р┤П р┤Р р┤У р┤Ф",
        short_vowels : "р┤О р┤П р┤Т р┤У",
        marks        : "р┤Х р┤Цр┤╛ р┤Чр┤┐ р┤Шр╡А р┤Щр╡Б р┤Ър╡В р┤Ыр╡Г р┤Ьр╡Д р┤Эр╡в р┤Юр╡г р┤Яр╡З р┤ар╡И р┤бр╡Л р┤вр╡М р┤гр┤В р┤др┤Г р┤ер╡Н",
        short_marks  : "р┤Хр╡Ж р┤Хр╡З р┤Хр╡К р┤Хр╡Л",
        consonants   : "р┤Х р┤Ц р┤Ч р┤Ш р┤Щ р┤Ъ р┤Ы р┤Ь р┤Э р┤Ю р┤Я р┤а р┤б р┤в р┤г р┤д р┤е р┤ж р┤з р┤и р┤к р┤л р┤м р┤н р┤о",
        other        : "р┤п р┤░ р┤▓ р┤╡ р┤╢ р┤╖ р┤╕ р┤╣ р┤│",
        symbols      : "р┤Ур┤В ред рее р╡ж р╡з р╡и р╡й р╡к р╡л р╡м р╡н р╡о р╡п",
        putra        : "р┤кр╡Бр┤др╡Нр┤░",
        naraIti      : "р┤ир┤░ р┤Зр┤др┤┐",
        sentence     : "р┤зр┤░р╡Нр┤ор┤Хр╡Нр┤╖р╡Зр┤др╡Нр┤░р╡З р┤Хр╡Бр┤░р╡Бр┤Хр╡Нр┤╖р╡Зр┤др╡Нр┤░р╡З р┤╕р┤ор┤╡р╡Зр┤др┤╛ р┤пр╡Бр┤пр╡Бр┤др╡Нр┤╕р┤╡р┤Г ред",
    },
    oriya : {
        vowels     : "рмЕ рмЖ рмЗ рмИ рмЙ рмК рмЛ рна рмМ рнб рмП рмР рмУ рмФ",
        marks      : "рмХ рмЦрм╛ рмЧрм┐ рмШрнА рмЩрнБ рмЪрнВ рмЫрнГ рмЬрнД рмЯрнЗ рмарнИ рмбрнЛ рмврнМ рмгрмВ рмдрмГ рмернН",
        consonants : "рмХ рмЦ рмЧ рмШ рмЩ рмЪ рмЫ рмЬ рмЭ рмЮ рмЯ рма рмб рмв рмг рмд рме рмж рмз рми рмк рмл рмм рмн рмо",
        other      : "рмп рм░ рм▓ рм╡ рм╢ рм╖ рм╕ рм╣ рм│",
        symbols    : "рмУрмВ ред рее рнж рнз рни рнй рнк рнл рнм рнн рно рнп",
        putra      : "рмкрнБрмдрнНрм░",
        naraIti    : "рмирм░ рмЗрмдрм┐",
        sentence   : "рмзрм░рнНрмормХрнНрм╖рнЗрмдрнНрм░рнЗ рмХрнБрм░рнБрмХрнНрм╖рнЗрмдрнНрм░рнЗ рм╕рморм╡рнЗрмдрм╛ рмпрнБрмпрнБрмдрнНрм╕рм╡рмГ ред",
    },
    tamil : {
        short_vowels : "роО роП роТ роУ",
        short_marks  : "роХрпЖ роХрпЗ роХрпК роХрпЛ",
    },
    telugu : {
        vowels       : "р░Е р░Ж р░З р░И р░Й р░К р░Л р▒а р░М р▒б р░П р░Р р░У р░Ф",
        short_vowels : "р░О р░П р░Т р░У",
        marks        : "р░Х р░Цр░╛ р░Чр░┐ р░Шр▒А р░Щр▒Б р░Ър▒В р░Ыр▒Г р░Ьр▒Д р░Эр▒в р░Юр▒г р░Яр▒З р░ар▒И р░бр▒Л р░вр▒М р░гр░В р░др░Г р░ер▒Н",
        short_marks  : "р░Хр▒Ж р░Хр▒З р░Хр▒К р░Хр▒Л",
        consonants   : "р░Х р░Ц р░Ч р░Ш р░Щ р░Ъ р░Ы р░Ь р░Э р░Ю р░Я р░а р░б р░в р░г р░д р░е р░ж р░з р░и р░к р░л р░м р░н р░о",
        other        : "р░п р░░ р░▓ р░╡ р░╢ р░╖ р░╕ р░╣ р░│",
        symbols      : "р░Ур░В ред рее р▒ж р▒з р▒и р▒й р▒к р▒л р▒м р▒н р▒о р▒п",
        putra        : "р░кр▒Бр░др▒Нр░░",
        naraIti      : "р░ир░░ р░Зр░др░┐",
        sentence     : "р░зр░░р▒Нр░ор░Хр▒Нр░╖р▒Зр░др▒Нр░░р▒З р░Хр▒Бр░░р▒Бр░Хр▒Нр░╖р▒Зр░др▒Нр░░р▒З р░╕р░ор░╡р▒Зр░др░╛ р░пр▒Бр░пр▒Бр░др▒Нр░╕р░╡р░Г ред",
    },
    wx : {
        consonants : "ka Ka ga Ga fa ca Ca ja Ja Fa ta Ta da Da Na wa Wa xa Xa na pa Pa ba Ba ma",
        symbols    : "oM | || 0 1 2 3 4 5 6 7 8 9",
        putra      : "puwra",
        naraIti    : "nara iwi",
        sentence   : "XarmakRewre kurukRewre samavewA yuyuwsavaH |",
    },
};

// -----------------------------------------------------------------------

QUnit.module("Setup");

/* Scheme basics
 * -------------
 * Test that all schemes have the same number of elements for each category,
 * e.g. "vowels" and "consonants".
 */
QUnit.test("Scheme definitions", function () {
    // Find the typical lengths of each category. We use Devanagari because it
    // contains every category, including "marks".
    const schemes = Sanscript.schemes;
    const devanagari = schemes.devanagari;
    const lengths = {};
    for (const key in devanagari) {
        lengths[key] = devanagari[key].length;
    }

    for (const name in schemes) {
        for (const key in schemes[name]) {
            // The virama is distinct from other categories.
            if (key !== "virama") {
                QUnit.assert.equal(schemes[name][key].length, lengths[key], name + "." + key);
            }
        }
    }
});

/* Roman schemes
 * -------------
 * Test that Sanscript.isRomanScheme returns true for all roman schemes.
 */
QUnit.test("Roman scheme membership", function () {
    const roman = ["iast", "itrans", "hk", "kolkata", "slp1", "velthuis", "wx"];
    const other = ["bengali", "devanagari", "gujarati", "gurmukhi", "kannada",
        "malayalam", "oriya", "tamil", "telugu"];

    for (const i in roman) {
        QUnit.assert.ok(Sanscript.isRomanScheme(roman[i]), roman[i]);
    }
    for (const i in other) {
        QUnit.assert.ok(!Sanscript.isRomanScheme(other[i]), other[i]);
    }
});


QUnit.test("Adding schemes", function () {
    const sanskritOCR = {
        vowels     : ["a", "├е", "i", "├п", "u", "├╖", "┼╕", "", "", "", "e", "ai", "o", "au"],
        consonants : ["k", "kh", "g", "gh", "┬╝",
            "c", "ch", "j", "jh", "├▒",
            "┬╢", "┬╢h", "┬╖", "┬╖h", "┬╜",
            "t", "th", "d", "dh", "n",
            "p", "ph", "b", "bh", "m",
            "y", "r", "l", "v",
            "┬╕", "┬╣", "s", "h",
            "", "k┬╣", "j├▒"],
    };
    Sanscript.addRomanScheme("sanskritOCR", sanskritOCR);
    const f = transHelper("sanskritOCR", "devanagari");
    f("bh├пma", "рднреАрдо");
    f("nar├е┬╜├еm", "рдирд░рд╛рдгрд╛рдореН");
});

// -----------------------------------------------------------------------

QUnit.module("Transliteration");

/**
 * For a script pair (f, t), return a function that takes two strings s1 and
 * s2 and asserts that s1, when transliterated from f to t, equals s2. The
 * returned function takes an optional 'description' parameter for QUnit.
 *
 * @param from     the source script
 * @param to       the destination script
 * @param options  transliteration options
 * @return         the function described above.
 */
const transHelper = function (from, to, options) {
    return function (input, output, description) {
        QUnit.assert.equal(Sanscript.t(input, from, to, options), output, description);
    };
};

/* Letter transliteration tests
 * ----------------------------
 * Basic checks on letters and symbols.
 *
 * @param from  the source data
 * @param to    the destination data
 * @param f     the function to use
 */
function letterTests (from, to, f) {
    f(from.vowels, to.vowels, "Vowels");
    f(from.marks, to.marks, "Marks");
    f(from.consonants, to.consonants, "Stops and nasals");
    f(from.other, to.other, "Other consonants");
    f(from.symbols, to.symbols, "Symbols and punctuation");
}

/* Text transliteration tests
 * --------------------------
 * Basic checks on words and sentences.
 *
 * @param from  the source data
 * @param to    the destination data
 * @param f     the function to use
 */
function textTests (from, to, f) {
    f(from.putra, to.putra, "Single word");
    f(from.naraIti, to.naraIti, "Two words, one with explicit vowel");
    f(from.sentence, to.sentence, "Basic sentence");
}

QUnit.test("Devanagari to Bengali", function () {
    const from = data.devanagari; const to = data.bengali;
    const f = transHelper("devanagari", "bengali");
    letterTests(from, to, f);
    textTests(from, to, f);
    f("рд╡", "ржм", "рд╡ transliteration");
    f("рдм", "ржм", "рдм transliteration");
});

QUnit.test("Devanagari to Cyrillic", function () {
    const from = data.devanagari;
    const to = data.cyrillic;
    const f = transHelper("devanagari", "cyrillic");
    letterTests(from, to, f);
    textTests(from, to, f);
});


QUnit.test("Devanagari to Harvard-Kyoto", function () {
    const from = data.devanagari;
    const to = data.hk;
    const f = transHelper("devanagari", "hk");
    letterTests(from, to, f);
    textTests(from, to, f);

    // Other
    f("wwреаww", "wwRRww", "Vowel among other letters");
    f("wwрдХww", "wwkaww", "Consonant among other letters");
});

QUnit.test("Devanagari to Gujarati", function () {
    const from = data.devanagari;
    const to = data.gujarati;
    const f = transHelper("devanagari", "gujarati");
    letterTests(from, to, f);
    textTests(from, to, f);
});

QUnit.test("Devanagari to Gurmukhi", function () {
    const from = data.devanagari;
    const to = data.gurmukhi;
    const f = transHelper("devanagari", "gurmukhi");
    f("рдЕ рдЖ рдЗ рдИ рдЙ рдК рдП рдР рдУ рдФ", to.vowels, "Vowels"); // no рдЛ/реа/рдМ/реб
    f("рдХ рдЦрд╛ рдЧрд┐ рдШреА рдЩреБ рдЪреВ рдЯреЗ рдареИ рдбреЛ рдвреМ рдгрдВ рддрдГ рдереН", to.marks, "Marks"); // no рдЛ/реа/рдМ/реб
    f(from.consonants, to.consonants, "Stops and nasals");
    f(from.other, to.other, "Other consonants");
    f(from.symbols, to.symbols, "Symbols and punctuation");
    textTests(from, to, f);
});

QUnit.test("Devanagari to Kannada", function () {
    // Letters
    const from = data.devanagari;
    const to = data.kannada;
    const f = transHelper("devanagari", "kannada");
    letterTests(from, to, f);
    textTests(from, to, f);
});

QUnit.test("Devanagari to Malayalam", function () {
    const from = data.devanagari;
    const to = data.malayalam;
    const f = transHelper("devanagari", "malayalam");
    letterTests(from, to, f);
    textTests(from, to, f);
});

QUnit.test("Devanagari to Oriya", function () {
    const from = data.devanagari;
    const to = data.oriya;
    const f = transHelper("devanagari", "oriya");
    f(from.vowels, to.vowels, "Vowels");
    f("рдХ рдЦрд╛ рдЧрд┐ рдШреА рдЩреБ рдЪреВ рдЫреГ рдЬреД рдЯреЗ рдареИ рдбреЛ рдвреМ рдгрдВ рддрдГ рдереН", to.marks, "Marks"); // no рдМ or реб
    f(from.consonants, to.consonants, "Stops and nasals");
    f(from.other, to.other, "Other consonants");
    f(from.symbols, to.symbols, "Symbols and punctuation");
    textTests(from, to, f);
    textTests(from, to, f);
});


QUnit.test("Devanagari to Telugu", function () {
    const from = data.devanagari;
    const to = data.telugu;
    const f = transHelper("devanagari", "telugu");
    letterTests(from, to, f);
    textTests(from, to, f);
});

QUnit.test("Harvard-Kyoto to Devanagari", function () {
    const from = data.hk;
    const to = data.devanagari;
    const f = transHelper("hk", "devanagari");
    letterTests(from, to, f);
    textTests(from, to, f);
    f("naraxiti", "рдирд░xрдЗрддрд┐", "Undefined letters");
});

QUnit.test("Harvard-Kyoto to IAST", function () {
    const from = data.hk;
    const to = data.iast;
    const f = transHelper("hk", "iast");
    letterTests(from, to, f);
    textTests(from, to, f);
    f("tAmxiti", "t─Бmxiti", "Undefined letters");
});

QUnit.test("ITRANS to Devanagari", function () {
    const from = data.itrans;
    const to = data.devanagari;
    const f = transHelper("itrans", "devanagari");
    letterTests(from, to, f);
    textTests(from, to, f);
});

QUnit.test("IAST to Devanagari", function () {
    const from = data.iast;
    const to = data.devanagari;
    const f = transHelper("iast", "devanagari");
    letterTests(from, to, f);
    textTests(from, to, f);
    f("pin─Бkadhс╣Ыte", "рдкрд┐рдирд╛рдХрдзреГрддреЗ");
});

QUnit.test("WX to Devanagari", function () {
    const from = data.wx;
    const to = data.devanagari;
    const f = transHelper("wx", "devanagari");
    f(from.consonants, to.consonants, "Stops and nasals");
    f(from.symbols, to.symbols, "Symbols and punctuation");
    textTests(from, to, f);
});

QUnit.test("Telugu to Devanagari", function () {
    const from = data.telugu;
    const to = data.devanagari;
    const f = transHelper("telugu", "devanagari");
    textTests(from, to, f);
});

QUnit.test("Undefined letters", function () {
    const f = transHelper("devanagari", "gurmukhi");
    f("рдЛрдЪреНрдЫрддрд┐", "рдЛриЪрйНриЫридри┐");
});

// -----------------------------------------------------------------------

QUnit.module("Dravidian");

function dravidianTest (fromScript, toScript) {
    const label = names[fromScript] + " to " + names[toScript];
    QUnit.test(label, function () {
        const f = transHelper(fromScript, toScript);
        const from = data[fromScript];
        const to = data[toScript];
        f(from.short_vowels, to.short_vowels, "Vowels (forward)");
        f(from.short_marks, to.short_marks, "Vowel marks (forward)");
    });
}

dravidianTest("itrans_dravidian", "kolkata");
dravidianTest("itrans_dravidian", "devanagari");
dravidianTest("itrans_dravidian", "kannada");
dravidianTest("itrans_dravidian", "malayalam");
dravidianTest("itrans_dravidian", "tamil");
dravidianTest("itrans_dravidian", "telugu");
dravidianTest("kolkata", "devanagari");

// -----------------------------------------------------------------------

QUnit.module("Toggle");

QUnit.test("Harvard-Kyoto", function () {
    const f = transHelper("hk", "devanagari");
    f("akSa##kSa##ra", "рдЕрдХреНрд╖kSaрд░", "Basic disable");
    f("##akSa##kSa##ra", "akSaрдХреНрд╖ra", "Initial disable");
    f("akSa##ra##", "рдЕрдХреНрд╖ra", "Final disable 1");
    f("akSa##ra", "рдЕрдХреНрд╖ra", "Final disable 2");
    f("akSa##kSa##ra####", "рдЕрдХреНрд╖kSaрд░", "Redundant disable 1");
    f("a####kSara", "рдЕрдХреНрд╖рд░", "Redundant disable 2");
    f("a#kSara", "рдЕ#рдХреНрд╖рд░", "Misleading disable");
});

QUnit.test("Devanagari", function () {
    const f = transHelper("devanagari", "hk");
    f("рдЕ##рдХреНрд╖##рд░", "aрдХреНрд╖ra", "Basic disable");
    f("##рдЕ##рдХреНрд╖рд░", "рдЕkSara", "Initial disable");
    f("рдЕрдХреНрд╖##рд░##", "akSaрд░", "Final disable 1");
    f("рдЕрдХреНрд╖##рд░", "akSaрд░", "Final disable 2");
    f("рдЕрдХреНрд╖##рд░####", "akSaрд░", "Redundant disable 1");
    f("рдЕ####рдХреНрд╖рд░", "akSara", "Redundant disable 2");
    f("рдЕ#рдХреНрд╖рд░", "a#kSara", "Misleading disable");
});

// -----------------------------------------------------------------------

QUnit.module("Options");

QUnit.test("Hindi-style transliteration", function () {
    const f = transHelper("itrans", "devanagari", {syncope : true});
    f("karaN", "рдХрд░рдг");
    f("rAj ke lie", "рд░рд╛рдЬ рдХреЗ рд▓рд┐рдП");
});

QUnit.test("Skipping SGML", function () {
    const f1 = transHelper("hk", "devanagari");
    const f2 = transHelper("hk", "devanagari", {skip_sgml : false});
    const f3 = transHelper("hk", "devanagari", {skip_sgml : true});
    f1("<p>nara iti</p>", "<рдкреН>рдирд░ рдЗрддрд┐</рдкреН>");
    f2("<p>nara iti</p>", "<рдкреН>рдирд░ рдЗрддрд┐</рдкреН>");
    f3("<p>nara iti</p>", "<p>рдирд░ рдЗрддрд┐</p>");
    f3("##<p>nara iti</p>", "<p>nara iti</p>");
});

// -----------------------------------------------------------------------

QUnit.module("ITRANS");

QUnit.test("Zero-width joiner", function () {
    const f = transHelper("itrans", "devanagari");
    f("bara_u", "рдмрд░рдЙ", "Separated vowels");
    f("k{}Shetra", "рдХреНтАНрд╖реЗрддреНрд░", "Separated consonants");
});

QUnit.test("Virama", function () {
    const f = transHelper("itrans", "devanagari");
    const g = transHelper("devanagari", "itrans");
    f("tattatvam.h", "рддрддреНрддрддреНрд╡рдореН", "ITRANS to Devanagari");
    g("рддрддреНрддрддреНрд╡рдореН", "tattatvam", "Devanagari to ITRANS");
});

QUnit.test("Alternates", function () {
    const f = function (itrans1, itrans2, description) {
        const dev1 = Sanscript.t(itrans1, "itrans", "devanagari");
        const dev2 = Sanscript.t(itrans2, "itrans", "devanagari");
        QUnit.assert.equal(dev2, dev1, description);
    };

    f("A I U RRi RRI LLi LLI", "aa ii uu R^i R^I L^i L^I", "vowels");
    f("kA kI kU kRRi kRRI kLLi kLLI", "kaa kii kuu kR^i kR^I kL^i kL^I",
        "vowels (marks)");
    f("I U", "ee oo", "long I and U");
    f("kI kU", "kee koo", "long I and U (marks)");
    f("aM aM", "a.m a.n", "anusvara");
    f("~Na", "N^a", "na (kavarga)");
    f("ca", "cha", "ca");
    f("Cha Cha", "Ca chha", "cha");
    f("va", "wa", "va/wa");
    f("Sha Sha", "Sa shha", "sha (retroflex)");
    f("kSha kSha kSha", "kSa kshha xa", "ksha");
    f("j~na j~na", "GYa dnya", "jna");
    f("OM", "AUM", "om");
    f(".a | ||", "~ . ..", "punctuation");
    f("za", "Ja", "Devanagari za");
    f("a{\\m+}", "a.h.N", "{\\m+}");
});

QUnit.test("Backslash escape", function () {
    const f = transHelper("itrans", "devanagari");
    f("\\nara", "nрдЕрд░");
    f("na\\ra", "рдиrрдЕ");
    f("nara\\", "рдирд░");
});

QUnit.test("Accent", function () {
    const f = transHelper("itrans", "devanagari");
    f("a\\_gnimI\\'le pu\\_rohi\\'tam", "рдЕреТрдЧреНрдирд┐рдореАреСрд▓реЗ рдкреБреТрд░реЛрд╣рд┐реСрддрдореН");
    f("naH\\' naH\\_ naH\\`", "рдирдГреС рдирдГреТ рдирдГреТ", "Visarga + accent");
    f("na\\'H na\\_H na\\`H", "рдирдГреС рдирдГреТ рдирдГреТ", "Accent + visarga");
    f("taM\\' ta.m\\' ta.n\\' taM\\_ ta.m\\_ ta.n\\_ taM\\` ta.m\\` ta.n\\`", "рддрдВреС рддрдВреС рддрдВреС рддрдВреТ рддрдВреТ рддрдВреТ рддрдВреТ рддрдВреТ рддрдВреТ", "Anusvara + accent");
    f("ta\\'M ta\\'.m ta\\'.n ta\\_M ta\\_.m ta\\_.n ta\\`M ta\\`.m ta\\`.n", "рддрдВреС рддрдВреС рддрдВреС рддрдВреТ рддрдВреТ рддрдВреТ рддрдВреТ рддрдВреТ рддрдВреТ", "Accent + anusvara");

    const g = transHelper("devanagari", "tamil_superscripted");
    g("рдЕреТрдЧреНрдирд┐рдореАреСрд▓реЗ рдкреБреТрд░реЛрд╣рд┐реСрддрдореН", "роЕреТроХрпН┬│роиро┐роорпАреСро▓рпЗ рокрпБреТро░рпЛро╣ро┐реСродроорпН");
    g("рдЧреНрдирд┐реТ рдЧрд┐реС рдЬреБ рдЦрд╛", "роХрпН┬│роиро┐реТ роХро┐реС┬│ роЬрпБ роХро╛┬▓");
    // var gInverse = transHelper('tamil_superscripted', 'devanagari');
    // gInverse('роХрпН┬│роиро┐реТ роХро┐реС┬│ роЬрпБ роХро╛┬▓', "рдЧреНрдирд┐реТ рдЧрд┐реС рдЬреБ рдЦрд╛");

});

QUnit.test("Non-Sanskrit letters", function () {
    const ben = transHelper("itrans", "bengali");
    const dev = transHelper("itrans", "devanagari");
    const kan = transHelper("itrans", "kannada");
    const guj = transHelper("itrans", "gujarati");
    const gur = transHelper("itrans", "gurmukhi");
    const mal = transHelper("itrans", "malayalam");
    const ori = transHelper("itrans", "oriya");
    const tam = transHelper("itrans", "tamil");
    // const tel = transHelper("itrans", "telugu");

    ben(".De .Dhe Ye", "ржбрзЗ ржврзЗ ржпрзЗ");
    dev("qa KA Gi zI .Du .DU fRRi YRRI RLLi", "рдХрд╝ рдЦрд╝рд╛ рдЧрд╝рд┐ рдЬрд╝реА рдбрд╝реБ рдбрд╝реВ рдлрд╝реГ рдпрд╝реД рд▒рев");
    dev("ka.cna", "рдХреЕрди");
    kan("fI RI", "р▓лр│А р▓▒р│А");
    guj("ka.cna", "ркХрлЕрки");
    gur("Ko Go zo Jo .Do fo", "риЦрйЛ риЧрйЛ риЬрйЛ риЬрйЛ рибрйЛ рилрйЛ");
    mal("RI", "р┤▒р╡А");
    ori(".DU .DhU YU", "рмбрнВ рмврнВ рмпрнВ");
    tam("RI", "ро▒рпА");
});
